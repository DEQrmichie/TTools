'*************************************************
'This script samples topographic shade east, south, and west for TTools database
'Script contains pieces of ESRI's Visbility-Line of Site Extension
'Calculates a far topo and a near-stream topo - records highest of the two values
'user defines far topo extent and sampling interval
'near-stream topo samples every dem cell within 1/4 mile of stream
'Written by Brian Kasper - Oregon DEQ October 24, 2002
'*************************************************

av.finddialog("topo").close

theView = av.GetActiveDoc
theThemes={}

myview=av.getactivedoc
viewunits=myview.getunits

if (MsgBox.YesNo("It is highly recommended that you save the project, completely exit ArcView, and re-open the project before beginning a grid sampling procedure (in order to clear ArcView memory).  Have you done this, and would you like to continue?","Warning!", true)) then
  yogibear=3 'continue on
else
  exit   
end  'if (MsgBox...)

'-----------------
'Choose a point theme
'-----------------
themeList = theView.GetThemes 
rep = 0
stupid = 0
while (rep = 0)
  theTheme = MsgBox.List(themeList,"Select point theme...","Sample Topo")
  if (theTheme = NIL) then
    exit
  end 
  if (theTheme.Is(Ftheme).Not) then
    stupid = stupid+1
    if (stupid = 4) then
      msgBox.Info("Select a valid theme")
    end
    msgBox.Error("Not a valid theme","Error")
  else
    rep = 1
    theFtab = theTheme.GetFtab
  end
end
rep = 0
stupid = 0

theThemes={}
if (theFtab.CanEdit) then
  theFTab.SetEditable(true)
  if ((theFTab.CanAddFields).Not) then
    MsgBox.Info("Can't add fields to the table."+NL+"Check write permission.","Can't add grid values")
    exit
  end
else
  MsgBox.Info("Can't modify the feature table."+NL+
  "Check write permission.","Can't add grid values")
  exit
end

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  ' Get the view
TheView = av.GetActiveDoc
if (TheView = nil) then
  MsgBox.Info("The View was NOT found . . . Returning","Returning")
  return(nil)
end
  
  ' get a list of all grid themes
themeList = theView.GetThemes

  ' Make a list to hold grids 
theGridList = list.Make

  ' find the Gthemes
for each th in themelist
   if (th.IS(Gtheme)) then
    theGridList.add(th)
  end 
end

  ' check to make sure there are some grids
if (theGridList.count=0) then
  msgBox.Info("There are NO Grid Themes in the View","Returning")
  return(nil)
end

  '  Select a grid
theGTheme = MsgBox.ListAsString(thegridlist,"Select a DEM Grid","Available Grids")
if (nil = theGTheme) then
  msgBox.Info("No Grid Theme Selected . . . Returning","Returning") 
  return(nil)
end

  '  1) need a grid  - use GetGrid 
theGrid =  theGTheme.GetGrid

theVisDict = Dictionary.Make(5)
theVisDict.Add("Vis Grid", theGrid)
theVisDict.Add("Vis Theme", theGTheme)
'theVisDict.Add("Vis List", lstVisList)

  ' set the tools object tag  = the vis Dict
SELF.SetObjectTag(theVisDict)

Extent = MsgBox.Input ("Input Sampling Extent (in MILES)", "Distance", "8").asNumber

NumCellFact = MsgBox.Input ("Input Sampling Interval (in # of DEM cells)", "Number", "20").asNumber

myview=av.getactivedoc

viewunits=myview.getunits

GridSize=theGrid.GetCellSize

GridSizeK = theGrid.GetCellSize

If (viewunits = #UNITS_LINEAR_FEET) then
  gridsize = (gridsize*0.3048)
else
  gridsize = gridsize
end

'''''''''''''''''
'choose dem units
''''''''''''''''''

options = { "Feet","Meters"}
DEMunits = MsgBox.choiceAsString( options, "What are your DEM elevation units?", "IMPORTANT:")
if (DEMunits = nil) then
msgbox.info("You must make a selection.","")
exit
end

'''''''''''''''''''''''''''''''''''''''''''''''
'OVERWRITE EXISTING DATA?'''''''''''''''''''''''''''''''''''''''''''''''''''''''''   

  theFields = thefTab.GetFields  
  numFld1 = theFtab.findfield("TopoEast")  
  numfld2 = theftab.findfield("TopoWest")
  numfld3 = theftab.findfield("TopoSouth")
  numFld4 = theFtab.findfield("XEast")  
  numfld5 = theftab.findfield("YEast")
  numfld6 = theftab.findfield("XSouth")
  numFld7 = theFtab.findfield("YSouth")  
  numfld8 = theftab.findfield("XWest")
  numfld9 = theftab.findfield("YWest")  

if (MsgBox.YesNo("Overwrite Existing Data?","Topographic Shade fields already exist", false)) then

  for each rec in theftab
    theftab.setvalue(numfld1,rec,0)
    theftab.setvalue(numfld2,rec,0)    
    theftab.setvalue(numfld3,rec,0)
    theftab.setvalue(numfld4,rec,0)
    theftab.setvalue(numfld5,rec,0)    
    theftab.setvalue(numfld6,rec,0)
    theftab.setvalue(numfld7,rec,0)
    theftab.setvalue(numfld8,rec,0)    
    theftab.setvalue(numfld9,rec,0)

  end
else
  clinton=123
end

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
'------------------
' Check fields
'------------------
  theFields = thefTab.GetFields  
  numFld1 = theFtab.findfield("TopoEast")  
  numfld2 = theftab.findfield("TopoWest")
  numfld3 = theftab.findfield("TopoSouth")

Blubber=1
'......................................................

theftab=thetheme.getftab
theshapefield=theftab.findfield("shape")
theshapename=theftab.returnvalue(theshapefield,0).getclass.getclassname

'-------------------------------------------------------------------------------------------
theProgressDialog = av.FindDialog ("ProgressMeter")
thePDBeginTime = theProgressDialog.FindByName("lblBeginTime")
thePDCurrentTime = theProgressDialog.FindByName("lblCurrentTime")
thePDRecordNumber = theProgressDialog.FindByName("lblRecordNumber")
thePDIndex = theProgressDialog.FindByName("lblIndex")
thePDTimeLeft = theProgressDialog.FindByName("lblTimeLeft")
thePDPercentDone = theProgressDialog.FindByName("lblPercentDone")
thePDProgressBar = theProgressDialog.FindByName("icnProgressLine")

' - BEGIN TIME ------------------------------------------------------------------------------
' Just set the date format.
Date.SetDefFormat ("MMMM d, h:m:s AMPM")
' Find the exact time this request is executed. I put this line in right before my script
' starts calculating things.
BeginTime = Date.Now
' Put the BeginTime value in to the dialog box.
thePDBeginTime.SetLabel("Began Job:"++BeginTime.AsString)

'=====================

' - CURRENT TIME ----------------------------------------------------------------------------
' Finds the current time and formats it, then writes current time to the label.
thePDCurrentTime.SetLabel(date.now.setFormat("h:m:s AMPM").AsString)

'- RECORD NUMBER --------------------------------------------------------------------------- 
thePDRecordNumber.SetLabel ("Working on "+theshapename+" # 1 of [some number]")
'- INDEX -----------------------------------------------------------------------------------
thePDIndex.SetLabel ("Measuring Topographic Shade Angles...")
'- PERCENT DONE ----------------------------------------------------------------------------
thePDPercentDone.SetLabel ("00.0%")

'====================

'------------------
' Sample Topo
'------------------
TotRec = 0

LastValue=1000000
For each Rec in theFtab
  TotRec = TotRec+1
End

thepolycount=totrec

theFieldE=theFTab.FindField("Elevation")
theFieldX=theFTab.FindField("Xcoord")
theFieldY=theFTab.FindField("Ycoord")
theFieldZ=theFTab.FindField("TopoWest")
theFieldZZ=theFTab.FindField("TopoEast")
theFieldZZZ=theFTab.FindField("TopoSouth")
'====================

av.finddialog("Progressmeter").open

for each rec in theftab

checkW = theftab.returnvaluenumber(thefieldZ,rec)
checkE = theftab.returnvaluenumber(thefieldZZ,rec)
checkS = theftab.returnvaluenumber(thefieldZZZ,rec)

if (checkW >90) then
    theftab.setvalue(numfld1,rec,0)
    theftab.setvalue(numfld2,rec,0)    
    theftab.setvalue(numfld3,rec,0)
    theftab.setvalue(numfld4,rec,0)
    theftab.setvalue(numfld5,rec,0)    
    theftab.setvalue(numfld6,rec,0)
    theftab.setvalue(numfld7,rec,0)
    theftab.setvalue(numfld8,rec,0)    
    theftab.setvalue(numfld9,rec,0)
end 'if

if (checkE > 90) then
    theftab.setvalue(numfld1,rec,0)
    theftab.setvalue(numfld2,rec,0)    
    theftab.setvalue(numfld3,rec,0)
    theftab.setvalue(numfld4,rec,0)
    theftab.setvalue(numfld5,rec,0)    
    theftab.setvalue(numfld6,rec,0)
    theftab.setvalue(numfld7,rec,0)
    theftab.setvalue(numfld8,rec,0)    
    theftab.setvalue(numfld9,rec,0)
end 'if

if (checkS > 90) then
    theftab.setvalue(numfld1,rec,0)
    theftab.setvalue(numfld2,rec,0)    
    theftab.setvalue(numfld3,rec,0)
    theftab.setvalue(numfld4,rec,0)
    theftab.setvalue(numfld5,rec,0)    
    theftab.setvalue(numfld6,rec,0)
    theftab.setvalue(numfld7,rec,0)
    theftab.setvalue(numfld8,rec,0)    
    theftab.setvalue(numfld9,rec,0)
end 'if

end 'for



CrashTest = 0

For each Rec in theFtab

checkW = theftab.returnvaluenumber(thefieldZ,rec)
checkE = theftab.returnvaluenumber(thefieldZZ,rec)
checkS = theftab.returnvaluenumber(thefieldZZZ,rec)

Summation = (CheckW+CheckE+CheckS)

if (Summation=0) then

CrashTest = CrashTest + 1

If (viewunits = #UNITS_LINEAR_FEET) then
  ConversionFactor = 5280 
else 'viewunits = meters
  ConversionFactor = 1609.344
end

for each q in 1..3 by 1

if (q=1) then
  Xa = theftab.returnvaluenumber(thefieldX,rec)
  Ya = theftab.returnvaluenumber(thefieldY,rec)
  PointA = point.Make ( xa, ya )
  PointB = point.Make ( (xa-(extent*ConversionFactor)), ya )
  PointBnear = point.Make ( (xa-(0.25*ConversionFactor)),ya)
  theLine = line.make(PointA, PointB)
  theLineNear = line.make(PointA, PointBnear)
elseif (q=2) then
  Xa = theftab.returnvaluenumber(thefieldX,rec)
  Ya = theftab.returnvaluenumber(thefieldY,rec)
  PointA = point.Make ( xa, ya )
  PointB = point.Make ( xa, (ya-(extent*ConversionFactor)))
  PointBnear = point.make ( xa, (ya-(0.25*ConversionFactor)))
  theLine = line.make(PointA, PointB)
  theLineNear = line.make(PointA, PointBnear)
elseif (q=3) then
  Xa = theftab.returnvaluenumber(thefieldX,rec)
  Ya = theftab.returnvaluenumber(thefieldY,rec)
  PointA = point.Make ( xa, ya )
  PointB = point.Make ( (xa+(extent*ConversionFactor)), ya )
  PointBnear = point.Make ( (xa+(0.25*ConversionFactor)), ya )
  theLine = line.make(PointA, PointB)
  theLineNear = line.make(PointA, PointBnear)
end


'---------------------Progress bar stuff------------------------------------------

       ' -- CALCULATE AND ASSIGN VALUES TO "thePDRecordNumber" -------------------------------------
       theStepNumber = rec + 1
       theRecordCount = theFTab.GetNumRecords-1
       thePDRecordNumber.SetLabel ("Working on TTools Node # "+(rec).AsString++"of"++theRecordCount.AsString)

       ' -- CALCULATE AND ASSIGN VALUES TO "thePDPercentDone" and the Graphic Bar Size -------------
       thePercentDone = (rec/theRecordCount)*100
       thePercentDone.SetFormat ("dd.d")      
       thePDPercentDone.SetLabel (""+thePercentDone.AsString+"%")
 
       ' -- CALCULATE AND ASSIGN VALUES TO "thePDIndex" --------------------------------------------
       thePDIndex.SetLabel ("Calculating Topographic Shade Angles...")
         
       ' -- CALCULATE AND ASSIGN VALUES TO CURRENT TIME ("thePDCurrentTime") -------------------       
       thePDCurrentTime.SetLabel(date.now.setFormat("h:m:s AMPM").AsString)

       theProgressDialog.Activate

'----------------------------------------------------------------------------------------------------
  av.Showmsg("Measuring Topographic Shade...")
  av.ShowStopButton
   more=av.SetStatus(100*rec/totrec)
   If (not more) then
    av.showmsg("Topographic Shade Angle Sampling Stopped...")
    Msgbox.info("Topographic Shade Angle Sampling Stopped.","Status:")
    av.ClearStatus
    av.ClearMsg
    theFtab.Flush
    theFtab.Refresh 
    theFTab.SetEditable(False)
    exit
  End
'  -----------------------------------------------------------------

ThisScript = Script.The.GetName

  ' Get the view
TheView = av.GetActiveDoc

if (TheView = nil) then
  MsgBox.Info("The View was NOT found . . . Returning","Returning")
  return(nil)
end   '  if (TheView = nil) then

theProj=theview.getprojection

themeList = theView.GetThemes

  ' Make a list to hold grids 
theGridList = list.Make

  ' find the Gthemes
for each th in themelist
   if (th.IS(Gtheme)) then
    theGridList.add(th)
  end 
end

  ' check to make sure there are some grids
if (theGridList.count=0) then
  msgBox.Info("There are NO Grid Themes in the View","Returning")
  return(nil)
end

  ' Get the object tag from the control
theVisDict = SELF.GetObjectTag
if (theVisDict = nil) then
   
  MsgBox.Error("The Visibility Parameters were NOT found . . . Returning","Returning")
  theToolCtls = av.GetActiveGUI.GetToolBar.GetControls.Get(0)
  theToolCtls.Select
  return(nil)
  
end    '    if (theVisDict = nil) then

  ' get the start(observer) and End(target) of the line

pntObs1 = PointA

pntTar1   = pointB
pntTar1near = pointBnear
 
  ' get parameters from the object tag
theGrid = theVisDict.Get("Vis Grid")
lstVisList = theVisDict.Get("Vis List")
theGTheme = theVisDict.Get("Vis Theme")

  ' Get the offset values from the dictionary

  if (DEMunits = "Feet") then
    obs_off = 9.8425
    tar_off = 9.8425 
  else 'demunits = meters
    obs_off = 3
    tar_off = 3  
  end

  ' set the Cell Factor - determines how many sample points are taken
'numCellFact = 10
numCellFactNear = 1

  ' Create an alphabet list
lstTheAlphabet = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R"}

   ' get the start(observer) and end (target) coordinates of the line

obs_z = theGrid.CellValue(pointA,theProj) + obs_off
obs_znear=  theGrid.CellValue(PointA,theProj) + obs_off
tar_z = theGrid.CellValue(pointB,theProj) + tar_off
tar_znear = theGrid.CellValue(pointBnear,theProj) + tar_off
pntPT1 = PointA

  ' make the line a polyline
linVisLine1 = theline.AsPolyline
linVisLineNear = thelinenear.AsPolyline
 if (theProj.isNull) then
   linVisLine = linVisLine1
   linVisLine2 = linVisLineNear
  else
     linVisLine=linVisLine1.returnunprojected(theProj)
     lineVisLine2=LinVisLineNear.returnunprojected(theProj)
 end

numDist = theline.ReturnLength
numDistNear = thelinenear.ReturnLength

'----------------------------------------

  ' get the slope between observer and target

if (viewunits = #UNITS_LINEAR_FEET) then
  if (DEMunits = "Feet") then
    numOT_slp = ( tar_z - obs_z ) / numDist
    numOT_slpNear = (Tar_znear - obs_z)/numDistnear
  else 'demunits = meters
    numOT_slp = (( tar_z - obs_z )*3.28084) / numDist
    numOT_slpNear = ((Tar_znear - obs_z)*3.28084)/numDistnear
  end
else 'viewunits = meters
  if (DEMunits = "Feet") then
    numOT_slp = (( tar_z - obs_z )*0.3048) / numDist
    numOT_slpNear = ((Tar_znear - obs_z)*0.3048)/numDistnear
  else 'demunits = meters
    numOT_slp = ( tar_z - obs_z )/ numDist
    numOT_slpNear = (Tar_znear - obs_z)/numDistnear
  end
end  

'---------------------------------------

  ' create distance and elevation lists for the Line graphic

numDensFact = numDist / (GridSizeK * numCellFact)
numDensFactNear = NumDistNear / (GridSizeK * numCellFactNear)

linVisLineDens = linVisLine1.ReturnDensified(numDist / numDensFact)
linVisLineDensNear = LinVisLineNear.ReturnDensified(numDistnear/numdensfactnear)
thePoints1 = linVisLineDens.AsMultiPoint.AsList
thePoints1near = linvislinedensnear.asmultipoint.aslist
 if (theProj.isnull) then
   thepoints=thepoints1
   thepointsnear=thepoints1near
 else
   thepoints={}
   thepointsnear={}
   for each apt in thepoints1
      thepoints.add(apt.returnunprojected(theProj))
   end
   for each aptnear in thepoints1near
       thepointsnear.add(aptnear.returnunprojected(theProj))
   end    
 end


theValues = theGrid.CellValueList(thePoints,TheProj)
theValuesNear = theGrid.CellValueList(thePointsNear,TheProj)

theDistances = {}
theDistancesnear={}
numIndex = 0
numIndexnear = 0
for each aPoint in thePoints1
  theDistances.Add((linVisLineDens.PointPosition(aPoint) / 100) * numDist)
  numIndex = numIndex + 1
end
for each aPointnear in thePoints1near
  theDistancesnear.add((linvislinedensnear.pointposition(apointnear)/100)*numdistnear)
  numindexnear = numindexnear + 1
end

' calculate factor for y axis
largestValue = theValues.Get(0)
largestValuenear = thevaluesnear.Get(0)
smallestValue = theValues.Get(0)
smallestValuenear = thevaluesnear.get(0)
for each val in theValues
    largestValue = largestValue Max val
    smallestValue = smallestValue Min val
end
for each valnear in thevaluesnear
    LargestValueNear = LargestValueNear Max valnear
    SmallestValueNear = SmallestValueNear Min valnear
end

    yFactor = ((largestValue - smallestValue) / 240).Abs
    yfactornear = ((LargestValuenear - smallestValuenear)/240).Abs
    xFactor = numDist / 440
    xFactornear = numDistNear / 440



numPx = 0
numPxNear = 0
numPy = (theValues.Get(0) - smallestValue) / yFactor
numPyNear = (theValuesnear.Get(0)-smallestValueNear) / yfactornear
pnt1Point = point.Make(numPx,numPy)
pnt1Pointnear = point.make(numPxNear,numPyNear)

  ' Calc slope at second point to use for local horizon
numSpot = theValues.Get(1)
numSpotNear = theValuesNear.Get(1)
numLocDist  = theDistances.Get(1)
NumLocDistNear = theDistancesnear.Get(1)
pntPt2 = thePoints.Get(1)
pntPt2near = thePointsNear.Get(1)

  ' Calculate the scaled x & y for the Profile
numPx = (theDistances.Get(1)) / xFactor
numPxNear = (TheDistancesNear.Get(1))/xFactorNear
numPy = (theValues.Get(1) - smallestValue) / yFactor
numPyNear = (theValuesNear.Get(1) - smallestValueNear)/yFactorNear
pnt2Point = Point.Make(numPx,numPy)
pnt2PointNear = Point.Make(numPxNear,numPyNear)

'-----------------------------------------
  ' Calc local horizon slope
  
if (viewunits = #UNITS_LINEAR_FEET) then
  if (DEMunits = "Feet") then  
    numH_slp = (numSpot - obs_z) / numLocDist
    numH_slpnear=(numSpotNear - obs_znear) / NumLocDistNear
  else 'demunits = meters
    numH_slp = ((numSpot - obs_z)*3.28084) / numLocDist
    numH_slpnear=((numSpotNear - obs_znear)*3.28084) / NumLocDistNear
  end
else 'viewunits = meters
  if (DEMunits = "Feet") then  
    numH_slp = ((numSpot - obs_z)*0.3048) / numLocDist
    numH_slpnear=((numSpotNear - obs_znear)*0.3048) / NumLocDistNear
  else 'demunits = meters
    numH_slp = (numSpot - obs_z) / numLocDist
    numH_slpnear=(numSpotNear - obs_znear) / NumLocDistNear
  end
end

'---------------------------------

  ' Initialize some variables
strLosStat = "Above"
bolBlocked = FALSE

  ' make a list for the current line of points
lstProLine = List.Make
lstProLineNear = List.Make

  ' add the first 2 points to it
lstProLine.Add(pnt1Point)
lstProLineNear.Add(pnt1Pointnear)
lstProLine.Add(pnt2Point)
lstProlineNear.add(pnt2Pointnear)

listOfProfileLists = {}
ListOfProfileListsNear = {}
'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  ' Loop through the rest of the locations for visible
for each i in 2 .. (theValues.count - 1)
  numSpot = theValues.Get(i)
  numLocDist = theDistances.Get(i)
   
    ' Calculate local Slope 
    
if (viewunits = #UNITS_LINEAR_FEET) then
  if (DEMunits = "Feet") then       
    numSlp = (numSpot - obs_z) / numLocDist
  else 'demunits = meters
    numSlp = ((numSpot - obs_z)*3.28084) / numLocDist
  end
else 'viewunits = meters
  if (DEMunits = "Feet") then       
    numSlp = ((numSpot - obs_z)*0.3048) / numLocDist
  else 'demunits = meters
    numSlp = (numSpot - obs_z) / numLocDist
  end
end
  
  if (bolBlocked.NOT) then
    if  (numslp > numOT_slp) then
      blocked = TRUE
    end 
  end    '  if ((bolBlocked.NOT) AND (numslp > numOT_slp)) then
  
    ' Point is above the local horizon
  if (numslp > numH_slp) then
    numH_slp = numslp

       ' Calculate the delta values
    deltaX = numLocDist
    
    if (viewunits = #UNITS_LINEAR_FEET) then
      if (DEMunits = "Feet") then
        deltaY = numspot - obs_z
      else 'demunits = meters
        deltaY = (numspot - obs_z)*3.28084
      end
    else  'viewunits = meters
      if (DEMunits = "Feet") then
        deltaY = (numspot - obs_z)*0.3048
      else 'demunits = meters
        deltaY = numspot - obs_z
      end
    end 'if 
          
       ' Calculate the Hypotenuse and the angle (as Degrees)
    theHyp = ((deltaX ^ 2) + (deltaY ^ 2)).sqrt
    theta = (deltaY / theHyp).Asin.AsDegrees
    
    if (theta<0) then
      theta = 0
    else
      theta = theta
    end 'if
 
     'temporarily place theta value into TTools table for future reference
    theftab.setvaluenumber(numfld5,rec,theta)


  end 'if (numslp >

end 'for each i in 2

'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
'nearXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  ' Loop through the rest of the locations for visible
for each g in 2 .. (theValuesnear.count - 1)
  numSpotnear = theValuesnear.Get(g)
  numLocDistnear = theDistancesnear.Get(g) 
     
    ' Calculate local Slope
  if (viewunits = #UNITS_LINEAR_FEET) then
    if (DEMunits = "Feet") then
      numSlpnear = (numSpotnear - obs_znear) / numLocDistnear
    else 'demunits = meters
      numSlpnear = ((numSpotnear - obs_znear)*3.28084) / numLocDistnear
    end
  else 'viewunits = meters
    if (DEMunits = "Feet") then
      numSlpnear = ((numSpotnear - obs_znear)*0.3048) / numLocDistnear
    else 'demunits = meters
      numSlpnear = (numSpotnear - obs_znear) / numLocDistnear
    end
  end 'if
    
  if (bolBlocked.NOT) then
    if  (numslpnear > numOT_slpnear) then
      blocked = TRUE
    end 
  end    '  if ((bolBlocked.NOT) AND (numslpnear > numOT_slpnear)) then
  
    ' Point is above the local horizon
  if (numslpnear > numH_slpnear) then
    numH_slpnear = numslpnear
    
       ' Calculate the delta values
    deltaXnear= numLocDistnear
    
    if (viewunits = #UNITS_LINEAR_FEET) then
      if (DEMunits = "Feet") then
        deltaYnear = numspotnear - obs_znear
      else 'demunits = meters
        deltaYnear = (numspotnear - obs_znear)*3.28084
      end
    else 'viewunits = meters
      if (DEMunits = "Feet") then
        deltaYnear = (numspotnear - obs_znear)*0.3048
      else 'demunits = meters
        deltaYnear = numspotnear - obs_znear
      end
    end 'if
    
       ' Calculate the Hypotenuse and the angle (as Degrees)
    theHypnear = ((deltaXnear ^ 2) + (deltaYnear ^ 2)).sqrt
    thetaNear = (deltaYnear/ theHypnear).Asin.AsDegrees
    
    if (thetaNear < 0 ) then
      thetaNear = 0
    else
      thetaNear = thetaNear
    end 'if
    
     'temporarily place thetanear value into TTools table for future reference
    theftab.setvaluenumber(numfld4,rec,thetanear)
  
  end 'if (numslpnear

end 'for each g in 2  


'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'record the results in ttools table
      
    originXfield = theftab.findfield("xcoord")
    originYfield = theftab.findfield("ycoord")
    
    originX = theftab.returnvaluenumber(originxfield,rec)
    originY = theftab.returnvaluenumber(originyfield,rec)
    
    thetaval = theftab.returnvaluenumber(numfld5,rec)
    thetanearval = theftab.returnvaluenumber(numfld4,rec)
    
    if (q=1) then
      if (thetaval>=thetanearval) then
        theftab.setvaluenumber(numfld2,rec,thetaval)
        theftab.setvaluenumber(numfld8,rec,(originX-numlocdist))
        theftab.setvaluenumber(numfld9,rec,originY)
      elseif (thetaval<thetanearval) then
        theftab.setvaluenumber(numfld2,rec,thetanearval)
        theftab.setvaluenumber(numfld8,rec,(originX-deltaXnear))
        theftab.setvaluenumber(numfld9,rec,originY)
      end  
    elseif (q=2) then
      if (thetaval>=thetanearval) then
        theftab.setvaluenumber(numfld3,rec,thetaval)
        theftab.setvaluenumber(numfld6,rec,originX)
        theftab.setvaluenumber(numfld7,rec,(originY-numlocdist))
      elseif (thetaval<thetanearval) then
        theftab.setvaluenumber(numfld3,rec,thetanearval)
        theftab.setvaluenumber(numfld6,rec,originX)
        theftab.setvaluenumber(numfld7,rec,(originY-deltaXnear))
      end  
    elseif (q=3) then
      if (thetaval>=thetanearval) then
        theftab.setvaluenumber(numfld1,rec,thetaval)
        theftab.setvaluenumber(numfld4,rec,(originX+numlocdist))
        theftab.setvaluenumber(numfld5,rec,originY)
      elseif (thetaval<thetanearval) then
        theftab.setvaluenumber(numfld1,rec,thetanearval)
        theftab.setvaluenumber(numfld4,rec,(originX+deltaXnear))
        theftab.setvaluenumber(numfld5,rec,originY)
      end  
    end
''''''''''''''''''''''''''''''''''''''''''''''''''''''''      
  
end 'for each q in 1..3 by 1
else 'if (check...
this = 4321
end

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++
theview=av.getactivedoc
theproject=av.getproject

GridSamplesPerNode = (((3*extent*1609.344)/(gridsize*numcellfact))+((3*0.25*1609.344)/gridsize))+20

    if ((GridSamplesPerNode*CrashTest)>=32000) then
    msgbox.info("Spatial Analyst has reached its sampling capacity.  TTools is now going to save your project and quit ArcView.  You must re-open your project, and continue sampling Topographic Shade.","Attention!")
    av.getproject.save
    av.quit
    exit
    end
'+++++++++++++++++++++++++++++++++++++++++++++++++++++

end 'for
'***************************************************************

'------------------
'Reset arcview
'------------------
  theFtab.Flush
  theFtab.Refresh 
  theFTab.SetEditable(False)
  av.purgeobjects
  av.ClearStatus
  av.ClearMsg
  Msgbox.info("Topographic Shade Angles Are Calculated!  Units are DEGREES.","Status:")
  thePDPercentDone.SetLabel ("100%")





